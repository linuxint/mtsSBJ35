name: Gradle Build, Test, and Deploy by Environment

on:
  push:
    branches:
      - main    # Main branch 업데이트 시 실행
      - local
      - dev     # Dev branch 업데이트 시 실행
      - stag    # Stag branch 업데이트 시 실행
      - prod
      - feature/* # 모든 feature 브랜치 실행
  pull_request:
    branches:
      - main    # Main branch 실행
      - local
      - dev     # Dev branch 실행
      - stag    # Stag branch 실행
      - prod

jobs:
  build:
    name: Build and Test by Environment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [local, dev, stag, prod] # 테스트 대상 환경 정의

    steps:
      # 1. Checkout Source Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up GraalVM JDK 23
      - name: Set up GraalVM JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'    # GraalVM JDK 설정
          java-version: '23'         # JDK 23 버전
          cache: gradle              # Gradle 캐시 활성화

      # 3. Cache Gradle Dependencies
      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-2
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      # 4. Set Spring Profile
      - name: Set Spring Profile
        run: echo "SPRING_PROFILES_ACTIVE=${{ matrix.env }}" >> $GITHUB_ENV

      # 5. Gradle Build and Test
      - name: Build and Test for ${{ matrix.env }} environment
        run: ./gradlew clean build --no-daemon -Dspring.profiles.active=${{ matrix.env }}

      # 6. Upload Test Results
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results - ${{ matrix.env }}
          path: build/test-results/**/*.xml

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build # Build 성공 시에만 실행
    if: github.ref == 'refs/heads/main' # Main 브랜치에서만 실행

    steps:
      # 1. Checkout Source Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up GraalVM JDK 23
      - name: Set up GraalVM JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '23'
          cache: gradle

      # 3. Deploy to Production
      - name: Deploy to Prod Environment
        env:
          SPRING_PROFILES_ACTIVE: prod
        run: |
          echo "Starting deployment to Production..."
          ./gradlew clean build --no-daemon -Dspring.profiles.active=prod

          # 실제 프로덕션 배포 로직 (AWS 예시)
          echo "Deploying to AWS..."
          aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment