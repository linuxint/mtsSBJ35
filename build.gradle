/*
 * This file was generated by the Gradle 'init' task.
 */
import org.cyclonedx.gradle.CycloneDxTask

plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'java'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '7.0.3'
    id 'org.cyclonedx.bom' version '2.3.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'net.ltgt.errorprone' version '4.1.0'
}

// Project Information
group = 'com.devkbil'
version = '1.3.0'
description = 'mtsSBJ35'

// Repository Configuration
repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url = 'https://repo.spring.io/milestone'
        name = 'Spring Milestone'
    }
    maven {
        url = 'https://repo.spring.io/snapshot'
        name = 'Spring Snapshot'
    }
    maven {
        url = 'https://artifacts.elastic.co/maven'
        name = 'Elasticsearch Maven'
    }
    maven {
        url = 'https://repo.clojars.org'
        name = 'Clojars'
    }
}

springBoot {
    buildInfo()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

javadoc {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        docEncoding = 'UTF-8'
        locale = 'ko_KR'
        // 클래스와 메서드에 대한 주석 누락만 검증
//        addStringOption('Xdoclint:all,-missing,-syntax', '-quiet')
        addBooleanOption('html5', true)
    }
}

// 각 configuration에 대한 exclude 설정
configurations.configureEach {
    exclude group: 'com.itextpdf', module: 'itextpdf' // iTextPDF 제외
}

dependencyManagement {
    imports {
//        mavenBom('org.springframework.boot:spring-boot-dependencies:3.5.0-RC1') {
//            bomProperty 'spring-security.version', '6.5.0-RC1'
//            bomProperty 'spring-integration.version', '6.5.0-RC1'
//            bomProperty 'spring-retry.version', '2.0.11'
//            bomProperty 'spring-amqp.version', '4.0.0-M2'
//        }
//        mavenBom('org.springframework.data:spring-data-bom:2025.1.0-M2') {
//            bomProperty 'spring-data-jpa', '4.0.0-M1'
//            bomProperty 'spring-data-jdbc', '4.0.0-M1'
//            bomProperty 'spring-data-elasticsearch', '6.0.0-M1'
//            bomProperty 'spring-data-commons', '4.0.0-M1'
//            bomProperty 'spring-data-relational', '4.0.0-M1'
//        }
    }
}

dependencies {
    // ======================
    // 1. Platform & BOM
    // ======================
//    implementation platform("org.springframework.data:spring-data-bom:2025.1.0-M1")
//    implementation platform("org.springframework.integration:spring-integration-bom:6.5.0-M2")
//    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-M6")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.19.0")
    implementation platform("io.micrometer:micrometer-bom:1.15.0-RC1")
    implementation platform("org.junit:junit-bom:5.13.0-M2")
//    implementation platform("org.springframework.modulith:spring-modulith-bom:1.4.0-M1")

    // ======================
    // 2. Spring Boot 핵심 Starter
    // ======================
    // Spring MVC 및 웹 관련
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'  // WebClient 지원을 위해 추가

    // 모니터링 및 관리
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'

    // 개발 도구 및 유틸리티
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-devtools'

    // 캐시 관련
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0'
//    implementation 'org.ehcache:ehcache' //:3.10.8

    // 코드 품질
    checkstyle 'com.puppycrawl.tools:checkstyle:10.23.0'

    // ======================
    // 3. Spring Data & Integration
    // ======================
    // JPA & Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.session:spring-session-jdbc'

    // Integration
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.integration:spring-integration-core'
    implementation 'org.springframework.integration:spring-integration-file'
    implementation 'org.springframework.integration:spring-integration-sftp'

    // Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.integration:spring-integration-mail'

    // ======================
    // 4. Security & Authentication
    // ======================
    // Core Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'

    // Authentication
    implementation 'io.jsonwebtoken:jjwt:0.12.6'
    implementation 'com.warrenstrange:googleauth:1.5.0'

    // ======================
    // 5. Jakarta EE & Server
    // ======================
    // Jakarta APIs
    implementation 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    implementation 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:4.0.0'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'
    implementation 'jakarta.el:jakarta.el-api:6.0.1'
    implementation 'jakarta.faces:jakarta.faces-api:4.1.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    // Implementation Libraries
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    implementation 'org.thymeleaf:thymeleaf-spring6:3.1.3.RELEASE'

    // Embedded Tomcat
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.7'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.7'
    implementation 'org.apache.tomcat.embed:tomcat-embed-el:11.0.7'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:11.0.7'
    implementation 'org.apache.tomcat:tomcat-annotations-api:11.0.7'

//    runtimeOnly 'org.springframework.boot:spring-boot-starter-jetty'        // 내장 Tomcat 런타임
//    implementation 'org.eclipse.jetty.http3:jetty-http3:12.0.16' // Jetty HTTP/3 의존성 추가
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-apache-jsp:12.0.16' // JSP 처리 엔진
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.16'   // 서블릿 지원
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-webapp:12.0.16'
//    implementation 'org.eclipse.jetty:jetty-server:12.0.16'
//    implementation 'org.eclipse.jetty:jetty-session:12.0.16'

//    implementation 'org.eclipse.jetty:jetty-webapp:11.0.24'
//    implementation 'org.eclipse.jetty:jetty-servlet:11.0.24'
//    implementation 'org.eclipse.jetty:apache-jsp:11.0.24'
//    implementation 'org.eclipse.jetty:jetty-annotations:11.0.24'

    // ======================
    // 5. 데이터베이스 및 퍼시스턴스
    // ======================
    // JDBC Drivers
    implementation 'org.xerial:sqlite-jdbc:3.49.1.0'
    implementation 'com.oracle.database.jdbc:ojdbc11:23.8.0.25.04'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.3'
    runtimeOnly 'com.h2database:h2:2.3.232'

    // ORM & SQL Mappers
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

    // ======================
    // 7. Search Engine & Elasticsearch
    // ======================
    // Elasticsearch Core
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // HTTP Client for Elasticsearch
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.5'

    // Elasticsearch Test
    testImplementation 'org.testcontainers:elasticsearch:1.20.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // ======================
    // 8. Logging & Monitoring
    // ======================
    // Micrometer & Metrics
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-jakarta9'
    implementation 'io.micrometer:micrometer-observation'
    implementation 'io.micrometer:micrometer-commons'
    implementation 'io.micrometer:micrometer-tracing:1.5.0'

    // Database Monitoring
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.11.0'
    implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.11.0'
    implementation 'com.github.gavlyukovskiy:flexy-pool-spring-boot-starter:1.11.0'
    implementation 'net.ttddyy:datasource-proxy:1.10.1'

    // Application Monitoring
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.4.7'

    // Distributed Tracing
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.11'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.8.RELEASE'

    // ======================
    // 9. Encryption & Security Utils
    // ======================
    // Bouncy Castle Security Provider
    implementation 'org.bouncycastle:bcjmail-jdk18on:1.80'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.80'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
    implementation 'org.bouncycastle:bcutil-jdk18on:1.80'

    // ======================
    // 10. File & Document Processing
    // ======================
    // Document Parsing
    implementation 'org.apache.tika:tika-core:3.1.0'
    implementation 'org.apache.tika:tika-parsers-standard-package:3.1.0'
    annotationProcessor 'org.apache.tika:tika-core:3.1.0'
    implementation 'org.apache.tika:tika-parsers:3.1.0'

    // Office Documents
    implementation 'org.apache.poi:poi-ooxml:5.4.1'
    implementation 'org.jxls:jxls-poi:3.0.0'
    implementation 'net.sf.mpxj:mpxj:14.0.0'
    implementation 'net.freeutils:jtnef:2.1.0'

    // PDF Processing
    implementation 'org.apache.pdfbox:pdfbox:3.0.5'
    implementation 'org.apache.pdfbox:jbig2-imageio:3.0.4'

    // Image Processing
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.4.0'
    implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.12.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'

    // Other Formats
    implementation 'com.google.zxing:javase:3.5.3'
    implementation 'org.mnode.ical4j:ical4j:4.1.1'
    implementation 'com.ibm.icu:icu4j:77.1'

    // ======================
    // 11. API Documentation
    // ======================
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // ======================
    // 12. Testing
    // ======================
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.16.0'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'  // WireMock 테스트 지원

    // ======================
    // 13. Utilities
    // ======================
    // Common Utils
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'org.modelmapper:modelmapper:3.2.3'
    implementation 'org.jodd:jodd-util:6.3.0'
//    implementation 'commons-lang:commons-lang:2.6'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'io.projectreactor:reactor-core:3.8.0-M3'  // Reactor Core 추가


    // Code Quality
    implementation 'io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.45'
    checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.45'
    runtimeOnly 'io.spring.javaformat:spring-javaformat-config:0.0.45'
    runtimeOnly 'io.spring.javaformat:spring-javaformat-intellij-idea-plugin:0.0.45'
    annotationProcessor 'com.google.errorprone:error_prone_core:2.36.0'
    errorprone 'com.google.errorprone:error_prone_core:2.36.0'

    // ======================
    // 14. Persistence & Validation
    // ======================
    // Hibernate
    implementation 'org.hibernate.validator:hibernate-validator:9.0.0.Final'
    implementation 'org.hibernate.orm:hibernate-core:7.0.0.Final'
    implementation 'org.hibernate.orm:hibernate-jcache:7.0.0.Final'

    // Jakarta Persistence
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.2.0'

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    // ======================
    // 15. Communication & Messaging
    // ======================
    // Rate Limiting
    implementation 'com.bucket4j:bucket4j_jdk17-oracle:8.14.0'

    // Web Communication
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // ======================
    // 16. Additional Database Tools
    // ======================
    // JOOQ
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq:3.20.4'
    implementation 'org.jooq:jooq-codegen:3.20.4'
    // jood.sql-dialect: ORACLE // application.properties || application.yml
    // 세선 DB

    // 미정렬
    //implementation 'org.springframework.ai:spring-ai-bedrock-converse-spring-boot-starter'

    // ======================
    // 17. Miscellaneous
    // ======================
    // Network
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.2.1.Final'

    // Version Control
    implementation 'org.eclipse.jgit:org.eclipse.jgit:7.2.1.202505142326-r'

    // External Libraries
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    // Vibur Connection Pool
    implementation 'org.vibur:vibur-dbcp:26.0'
}

// ======================
// Build Configuration
// ======================

// Checkstyle Configuration
tasks.withType(Checkstyle).configureEach { task ->
    task.reports {
        xml.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.file("reports/checkstyle.html").get().asFile
    }
    ignoreFailures = true
    showViolations = true
}

// Test Configuration
tasks.named('test').configure {
    useJUnitPlatform()
}

// Clean Configuration
tasks.named('clean').configure {
    doFirst {
        delete(
                'logs_local',
                'logs_dev',
                'logs_stag',
                'logs_prod',
                'logs',
                'work',
                'bin',
                'out',
                'target'
        )
    }
}

// Docker 관련 태스크 의존성 제거
//build.dependsOn.removeAll { it.name == 'dockerDown' }
//build.finalizedBy.removeAll { it.name == 'dockerUp' }

// External Libraries Configuration
//tasks.register('copyExternalLibs', Copy) {
//    from configurations.runtimeClasspath
//    include 'spring-javaformat-config-*.jar'
//    include 'spring-javaformat-checkstyle-*.jar'
//    include 'spring-javaformat-intellij-idea-plugin-*.jar'
//    into project.file('3dparty')
//}
tasks.register('copyExternalLibs', Copy) {
    def jarsToCopy = configurations.runtimeClasspath.findAll {
        println "Found JAR: ${it.name}"
        it.name.startsWith('spring-javaformat-') && it.name.endsWith('.jar')
    }

    from jarsToCopy
    into project.file('3dparty')
}

// Encoding Configuration
allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        systemProperty 'file.encoding', 'UTF-8'
    }

    tasks.withType(JavaExec).configureEach {
        systemProperty 'file.encoding', 'UTF-8'
    }
}

tasks.withType(JavaCompile).configureEach {
    // javac 플래그 중 --should-stop을 ErrorProne이 요구하는 값으로 설정
    options.compilerArgs += ["--should-stop=ifError=FLOW"]
    options.errorprone.enabled = enabled// ErrorProne 활성화
    options.errorprone.errorproneArgs.addAll([
            "-XepDisableWarningsInGeneratedCode"
    ])
}

// ======================
// Code Style Configuration
// ======================
spotless {
    enforceCheck = false

    java {

        encoding 'UTF-8' // 파일 인코딩 명시

        toggleOffOn() // 방식 토글 지원

        // Target Files
        target fileTree('src/main/java') { // 검사 대상 명확히 지정
            include '**/*.java' // `.java` 파일만 검사 대상
        }
        targetExclude '**/build/cyclonedx/sbom/**/*.java' // SBOM 경로를 명확히 제외

        // Import Management
        importOrder(
                "ch",
                "", "co",
                "", "com",
                "", "io",
                "", "jakarta",
                "", "net",
                "", "org",
                "", "javax",
                "", "java",
                "", "lombok",
                "", "\\#static"
        )

        // Custom Rules
        custom 'Format comments with <pre>', { content ->
            content.replaceAll(/\/\*\*([\s\S]*?)\*\//, { String match, String body ->
                String updatedBody = body.replaceAll(/<p>/, "").replaceAll(/<\/p>/, "")
                def result = "/**\n *<pre>${updatedBody}\n *</pre>\n */"
                return result.toString() == match ? match : result
            })
        }}
}
// ======================
// Quality Checks Configuration
// ======================

// Checkstyle
checkstyle {
    toolVersion = '10.23.0'
    config = resources.text.fromUri('https://raw.githubusercontent.com/spring-io/spring-javaformat/main/spring-javaformat-checkstyle/src/main/resources/spring-javaformat-checkstyle.xml')
}

// Format Check
tasks.register("checkFormatMain") {
    dependsOn 'spotlessCheck'
}

// ======================
// SBOM Generation
// ======================
// JVM CycloneDX SBOM Task
tasks.register('jvmCyclonedxBom', CycloneDxTask) {
    group = 'reporting'
    description = 'Generates an SBOM for only JVM dependencies'
    skipConfigs = configurations.names.findAll { it != 'compileClasspath' }
    outputName.set("jvm-sbom")
    destination.set(file("$buildDir/cyclonedx/sbom"))
    outputFormat.set('json')
}

// Application CycloneDX SBOM Task
tasks.register('appCyclonedxBom', CycloneDxTask) {
    group = 'reporting'
    description = 'Generates an SBOM for the application runtime dependencies'
    dependsOn 'jvmCyclonedxBom' // Ensure jvm-sbom.json is generated first
    skipConfigs.set(configurations.names - 'runtimeClasspath')
    outputName.set("application-sbom")
    destination.set(file("$buildDir/cyclonedx/sbom"))
    outputFormat.set('json')
}

// SBOM 파일을 src/main/resources로 복사
tasks.register('copySbomToResources', Copy) {
    dependsOn 'appCyclonedxBom'
    from("${buildDir}/sbom") // 예시: 생성된 SBOM 파일 경로
    into("${projectDir}/src/main/resources")

    outputs.upToDateWhen { false } // 캐시 무효화 (필요 시)
}

// META-INF/sbom/ 등의 불필요 경로 제거
tasks.register('cleanSbomPaths') {
    doLast {
        delete("$buildDir/resources/main/META-INF/sbom/") // 삭제
        delete("$buildDir/BOOT-INF/classes/META-INF/sbom/") // 중첩 경로 삭제
        delete("$buildDir/resources/main/META-INF/sbom/application.cdx.json") // 파일 삭제
    }
}

// Gradle 빌드 과정에서 적용
tasks.named('processResources') {
    exclude '**/cyclonedx/sbom/**' // SBOM 파일 처리 배제
    dependsOn 'copySbomToResources'
    finalizedBy 'cleanSbomPaths' // 리소스 처리 후 불필요 파일 삭제
}

// JAR 빌드 시 중복 제거 보장
tasks.named('bootJar') {
    finalizedBy 'cleanSbomPaths' // bootJar 실행 전 경로 정리
}

// Build Dependencies
build.dependsOn spotlessApply
build.dependsOn jvmCyclonedxBom, appCyclonedxBom, copySbomToResources

tasks.spotlessJava {
    // appCyclonedxBom 작업 이후 실행되도록 의존성 설정
    inputs.files(tasks.appCyclonedxBom.outputs.files)
    dependsOn tasks.named('jvmCyclonedxBom') // Spotless가 CycloneDX 작업 이후 실행되도록 설정
    dependsOn tasks.named('appCyclonedxBom') // Spotless가 CycloneDX 작업 이후 실행되도록 설정
    dependsOn tasks.named('copySbomToResources') // Spotless가 CycloneDX 작업 이후 실행되도록 설정
}

// Docker 관련 태스크 수정
task checkDocker {
    doLast {
        try {
            def process = "docker info".execute()
            def exitCode = process.waitFor()
            if (exitCode != 0) {
                logger.warn("Docker가 설치되어 있지 않거나 실행 중이지 않습니다. Docker를 설치하거나 실행해주세요.")
            } else {
                logger.info("Docker가 실행 중입니다.")
            }
        } catch (Exception e) {
            logger.warn("Docker 체크 중 오류 발생: ${e.message}")
        }
    }
}

task checkDockerCompose {
    doLast {
        try {
            def process = "docker-compose version".execute()
            def exitCode = process.waitFor()
            if (exitCode != 0) {
                logger.warn("Docker Compose가 설치되어 있지 않거나 실행 중이지 않습니다. Docker Compose를 설치하거나 실행해주세요.")
            } else {
                logger.info("Docker Compose가 실행 중입니다.")
            }
        } catch (Exception e) {
            logger.warn("Docker Compose 체크 중 오류 발생: ${e.message}")
        }
    }
}

task dockerUp(type: Exec) {
    group = 'docker'
    description = 'Docker 서비스를 시작합니다.'
    workingDir = 'docker'
    commandLine 'docker-compose', 'up', '-d'
    ignoreExitValue = true
    doLast {
        logger.info("Docker 서비스 시작 시도 완료")
    }
}

task dockerDown(type: Exec) {
    group = 'docker'
    description = 'Docker 서비스를 중지하고 제거합니다.'
    workingDir = 'docker'
    commandLine 'docker-compose', 'down'
    ignoreExitValue = true
    doLast {
        logger.info("Docker 서비스 중지 시도 완료")
    }
}

task dockerRemove(type: Exec) {
    group = 'docker'
    description = 'Docker 서비스와 볼륨을 제거합니다.'
    workingDir = 'docker'
    commandLine 'sh', 'docker-remove.sh'
    ignoreExitValue = true
    doLast {
        logger.info("Docker 서비스 제거 시도 완료")
    }
}

bootRun {
    // bootRun 시 테스트 실행 제외
    dependsOn 'compileJava', 'processResources'
    systemProperty 'spring.profiles.active', 'local'
}

test {
    // 테스트 실행 비활성화
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
