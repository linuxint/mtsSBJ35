import io.spring.javaformat.gradle.tasks.CheckFormat

/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'org.springframework.boot' version '3.5.0-M1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'java'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
    id 'io.spring.javaformat' version '0.0.43'
    id 'checkstyle'
    id 'org.cyclonedx.bom' version '2.0.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

checkstyle {
    maxWarnings = 0
    configFile = file('${rootDir}/codestyle/naver-checkstyle-rules.xml')
    configProperties = ['suppressionFile': '${rootDir}/codestyle/naver-checkstyle-suppressions.xml']
    toolVersion = '10.18.1'
}

group = 'com.devkbil'
version = '1.3.0'
description = 'mtsSBJ35'

dependencyManagement {
    imports {
        mavenBom('org.springframework.boot:spring-boot-dependencies:3.5.0-M1') {
//            bomProperty 'spring-framework.version', '7.0.0-M1'
//            bomProperty 'spring-security.version', '6.5.0-M1'
//            bomProperty 'spring-integration.version', '6.5.0-M1'
//            bomProperty 'spring-hateoas.version', '3.0.0-M1'
//            bomProperty 'spring-retry.version', '2.0.11'
        }
//        mavenBom 'org.springframework:spring-framework-bom:7.0.0-M1'
//        mavenBom 'org.springframework.data:spring-data-bom:2025.1.0-M1'
//        mavenBom 'org.springframework.integration:spring-integration-bom:6.5.0-M1'
//        mavenBom 'org.springframework.ai:spring-ai-bom:1.0.0-M5'
//        mavenBom 'com.fasterxml.jackson:jackson-bom:2.18.2'
//        mavenBom 'io.micrometer:micrometer-bom:1.15.0-M1'
//        mavenBom 'org.springframework.modulith:spring-modulith-bom:1.4.0-M1'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()  // 플러그인 관련 저장소
    maven { url = 'https://repo1.maven.org/maven2' } // Apache Maven Repository
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/snapshot' }
    maven { url = 'https://artifacts.elastic.co/maven' }
    maven {
        url = 'https://repo.clojars.org'
        name = 'Clojars'
    }
}

springBoot {
    buildInfo()
}

configurations.all {
    exclude group: 'commons-collections', module: 'commons-collections'
    exclude group: 'com.itextpdf', module: 'itextpdf'
}

dependencies {
    // ======================
    // 1. Spring Boot 핵심 Starter
    // ======================
    implementation 'org.springframework.boot:spring-boot-starter-web'         // Spring MVC 및 REST 지원
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'  // Thymeleaf 템플릿 엔진
    implementation 'org.springframework.boot:spring-boot-devtools'           // 개발용 핫 리로드 도구
    implementation 'org.springframework.boot:spring-boot-starter-actuator'   // 어플리케이션 모니터링 및 내장 관리 엔드포인트
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // ======================
    // 2. Spring Data (JPA, Redis 등 관련)
    // ======================
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'   // JPA 스펙 지원
    implementation 'org.springframework.boot:spring-boot-starter-data-redis' // Redis 데이터베이스 지원
    implementation 'org.springframework.boot:spring-boot-starter-mail'       // SMTP 이메일 전송
    implementation 'org.springframework.boot:spring-boot-starter-integration' // 메시징 지원
    implementation 'org.springframework.integration:spring-integration-mail' // 메일 통합
    implementation 'org.springframework.integration:spring-integration-core' // Spring Integration 코어
    implementation 'org.springframework.integration:spring-integration-sftp' // SFTP 통합
    implementation 'org.springframework.integration:spring-integration-file' // FILE 통합
    implementation 'org.springframework.session:spring-session-jdbc'

    // ======================
    // 3. Spring Security 및 인증
    // ======================
    implementation 'org.springframework.boot:spring-boot-starter-security'  // Spring Security 기본 기능
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE' // Thymeleaf 보안 확장
    implementation 'io.jsonwebtoken:jjwt:0.12.6'  // JWT 기반 인증 및 토큰 처리
    implementation 'com.warrenstrange:googleauth:1.5.0'

    // ======================
    // 4. Jakarta EE 관련
    // ======================
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    implementation 'org.thymeleaf:thymeleaf-spring6:3.1.3.RELEASE'

    implementation 'jakarta.faces:jakarta.faces-api:4.1.2'                   // Jakarta Faces (JSF API)
    implementation 'jakarta.el:jakarta.el-api:6.0.1'                         // Expression Language API
    implementation 'jakarta.servlet:jakarta.servlet-api:6.1.0'               // Servlet API
    implementation 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:4.0.0'       // JSP 지원
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'             // XML 바인딩
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'        // 내장 Tomcat 런타임
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.2'        // Tomcat 코어
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:11.0.2'   // WebSocket 지원
    implementation 'org.apache.tomcat.embed:tomcat-embed-el:11.0.2'          // JSP / EL 처리 모듈
    implementation 'org.apache.tomcat:tomcat-annotations-api:11.0.2'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:11.0.2'
//    runtimeOnly 'org.apache.tomcat:tomcat-native:1.2.35'

//    runtimeOnly 'org.springframework.boot:spring-boot-starter-jetty'        // 내장 Tomcat 런타임
//    implementation 'org.eclipse.jetty.http3:jetty-http3:12.0.16' // Jetty HTTP/3 의존성 추가
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-apache-jsp:12.0.16' // JSP 처리 엔진
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.16'   // 서블릿 지원
//    implementation 'org.eclipse.jetty.ee10:jetty-ee10-webapp:12.0.16'
//    implementation 'org.eclipse.jetty:jetty-server:12.0.16'
//    implementation 'org.eclipse.jetty:jetty-session:12.0.16'

//    implementation 'org.eclipse.jetty:jetty-webapp:11.0.24'
//    implementation 'org.eclipse.jetty:jetty-servlet:11.0.24'
//    implementation 'org.eclipse.jetty:apache-jsp:11.0.24'
//    implementation 'org.eclipse.jetty:jetty-annotations:11.0.24'

    // ======================
    // 5. 데이터베이스 및 퍼시스턴스
    // ======================
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'  // JDBC
    implementation 'org.xerial:sqlite-jdbc:3.48.0.0'                         // SQLite JDBC 드라이버
    implementation 'com.oracle.database.jdbc:ojdbc11:23.6.0.24.10'           // Oracle JDBC 드라이버
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.1'                 // MariaDB JDBC 클라이언트
    runtimeOnly 'com.h2database:h2:2.3.232'                                  // H2 데이터베이스 (테스트용)
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4' // MyBatis 지원

    // ======================
    // 6. 검색엔진 및 Elasticsearch
    // ======================
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch' // Elasticsearch Starter
    implementation 'co.elastic.clients:elasticsearch-java:8.17.1'                     // Elasticsearch Java API
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.27' // Elasticsearch 클라이언트
    testImplementation 'org.testcontainers:elasticsearch:1.20.3'
    implementation 'org.elasticsearch.client:elasticsearch-rest-client:8.17.1'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.2'

    // ======================
    // 7. 로깅 및 모니터링
    // ======================
    implementation 'io.micrometer:micrometer-registry-prometheus'           // Prometheus와의 통합
    implementation 'io.micrometer:micrometer-core'                          // Micrometer 코어
    implementation 'io.micrometer:micrometer-jakarta9'                      // Micrometer Jakarta 지원
    implementation 'io.micrometer:micrometer-observation'                   // 관측 시스템
    implementation 'io.micrometer:micrometer-commons'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.10.0' // SQL 쿼리 로깅
    implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.10.0' // DB 커넥션 상태 추적
    implementation 'com.github.gavlyukovskiy:flexy-pool-spring-boot-starter:1.10.0' // 커넥션 풀 동적 크기 제어 및 메트릭 모니터링
    implementation 'net.ttddyy:datasource-proxy:1.10.1' // 넥션 및 SQL 상태를 추적하고, 이벤트 기반 알림 처리
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.4.1'

    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.11'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.8.RELEASE'

    // ======================
    // 8. 암호화 및 보안 유틸리티
    // ======================
    implementation 'org.bouncycastle:bcjmail-jdk18on:1.80'                  // 암호화된 이메일 처리
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.80'                   // PKIX (X.509 인증서)
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'                   // 암호화 프로바이더
    implementation 'org.bouncycastle:bcutil-jdk18on:1.80'                   // 암호화 유틸리티

    // ======================
    // 9. 파일 및 문서 처리
    // ======================
    annotationProcessor 'org.apache.tika:tika-core:3.1.0'
    implementation 'org.apache.tika:tika-core:3.1.0'                        // 컨텐츠 감지/파싱
    implementation 'org.apache.tika:tika-parsers-standard-package:3.1.0'
    implementation 'org.apache.poi:poi-ooxml:5.4.0'                         // MS Office 파일 읽기/쓰기
    implementation 'org.jxls:jxls-poi:3.0.0'
    implementation 'net.sf.mpxj:mpxj:13.9.0'
    implementation 'net.freeutils:jtnef:2.1.0'
    implementation 'org.apache.pdfbox:pdfbox:3.0.4'                         // PDF 파일 작업 지원
    implementation 'org.apache.pdfbox:jbig2-imageio:3.0.4'
    implementation 'com.github.jai-imageio:jai-imageio-core:1.4.0'          // 이미지 처리
    implementation 'com.github.jai-imageio:jai-imageio-jpeg2000:1.4.0'
    implementation 'com.twelvemonkeys.imageio:imageio-jpeg:3.12.0'
    implementation 'com.google.zxing:javase:3.5.3'                          // QR 코드 생성 및 처리
    implementation 'org.mnode.ical4j:ical4j:4.1.0' // 2024-12-23 22:22:00
    implementation 'com.ibm.icu:icu4j:76.1'

    // ======================
    // 10. API 문서화 및 Swagger
    // ======================
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4' // SpringDoc OpenAPI UI
//    implementation 'io.swagger.parser.v3:swagger-parser-v3:2.1.24'

    // ======================
    // 11. 테스트 관련 라이브러리
    // ======================
    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // Spring 테스트 지원 Starter
    testImplementation 'org.testcontainers:elasticsearch:1.20.4'            // Elasticsearch 테스트 컨테이너
    // 테스트용 추가 구성
    testImplementation 'io.projectreactor:reactor-test'

    // ======================
    // 12. 기타 유틸리티
    // ======================
    implementation 'com.google.guava:guava:33.4.0-jre'                      // Guava 유틸리티
    implementation 'org.modelmapper:modelmapper:3.2.2'                      // Object 매핑
    implementation 'org.jodd:jodd-util:6.3.0'                               // Jodd 유틸리티 툴
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.13.0'

    // ======================
    // 13. 소스 품질 도구 및 정리
    // ======================
    implementation 'io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.43' // 코드 포맷팅
    checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.43'        // CheckStyle 룰
    runtimeOnly 'io.spring.javaformat:spring-javaformat-config:0.0.43'
    runtimeOnly 'io.spring.javaformat:spring-javaformat-intellij-idea-plugin:0.0.43'
    runtimeOnly 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.43'

    // ======================
    // 14. persistence
    // ======================
    implementation 'org.hibernate.validator:hibernate-validator:9.0.0.CR1'
    implementation 'org.hibernate.orm:hibernate-jcache:6.6.5.Final'
    implementation 'org.hibernate.orm:hibernate-core:6.6.5.Final'
//    implementation 'org.hibernate.orm:hibernate-core:7.0.0.Beta3'
//    implementation 'org.hibernate.orm:hibernate-jcache:7.0.0.Beta3'

    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
//    implementation 'jakarta.persistence:jakarta.persistence-api:3.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-cache'
//    implementation 'com.github.ben-manes.caffeine:caffeine'
//    implementation 'org.ehcache:ehcache' //:3.10.8

    implementation 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    testImplementation 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

    // ======================
    // 15. 통신 인터페이스
    // ======================
    //implementation 'com.bucket4j:bucket4j-oracle:8.14.0'
    implementation 'com.bucket4j:bucket4j_jdk17-oracle:8.14.0'
//    implementation 'io.github.bucket4j:bucket4j-spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'  // WebSocket 통신 지원
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // ======================
    // 16. 데이터베이스 기타
    // ======================
    // 테이블 생성
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq:3.17.0'
    implementation 'org.jooq:jooq-codegen:3.17.0'
    // jood.sql-dialect: ORACLE // application.properties || application.yml
    // 세선 DB


    // 미정렬
    //implementation 'org.springframework.ai:spring-ai-bedrock-converse-spring-boot-starter'

    implementation 'org.eclipse.jgit:org.eclipse.jgit:7.1.0.202411261347-r'


    implementation fileTree(dir: 'lib', include: ['*.jar'])
}

publishing {
    publications {
        maven(MavenPublication) {

            from(components.java)
        }
    }
}

tasks.withType(JavaExec).configureEach {
    systemProperty 'file.encoding', 'UTF-8'
}

tasks.withType(CheckFormat).configureEach {
    exclude 'package/to/exclude'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('clean') {
    delete(layout.projectDirectory.dir('logs_local'))
    delete(layout.projectDirectory.dir('logs_dev'))
    delete(layout.projectDirectory.dir('logs_stag'))
    delete(layout.projectDirectory.dir('logs_prod'))
    delete(layout.projectDirectory.dir('out'))
    delete(layout.projectDirectory.dir('logs'))
    delete(layout.projectDirectory.dir('work'))
}

// 외부 라이브러리를 복사하는 작업을 정의
tasks.register('copyExternalLibs', Copy) {
    from configurations.runtimeClasspath
    include 'spring-javaformat-config-*.jar' // 복사할 JAR 파일의 이름 패턴
    include 'spring-javaformat-checkstyle-*.jar' // 복사할 JAR 파일의 이름 패턴
    include 'spring-javaformat-intellij-idea-plugin-*.jar' // 복사할 JAR 파일의 이름 패턴
    into project.file('3dparty') // 소스 영역 디렉토리
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        systemProperty 'file.encoding', 'UTF-8'
    }

    tasks.withType(JavaExec).tap {
        configureEach {
            systemProperty 'file.encoding', 'UTF-8'
        }
    }
}